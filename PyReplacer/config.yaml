# =================================================================
# PyReplacer 設定ファイル (config.yaml)
#
# このファイルで、テキスト処理のすべての内容を定義します。
# runner.py は、この設定ファイルを読み込んで処理を実行します。
# =================================================================

# 1. ベースとなるI/O (入出力) 設定
# -----------------------------------------------------------------
io:
  input_path: "sample_input.txt"
  # 出力ファイル名には {job_name} というプレースホルダーが使用できます。
  # jobsセクションが実行される際、このプレースホルダーはジョブ名に置き換えられます。
  output_path: "output_{job_name}.txt" 

# 2. 再利用可能なパラメータセットの定義
# -----------------------------------------------------------------
# ここでは、各ライブラリ関数に渡す引数のセットに名前を付けて定義します。
# このセクションは、処理の「レシピ」集のようなものです。
params:
  # --- 複数の単語を一度に置換 ---
  # from: text_multi_replacer_from_lists.py
  multi_word_replace_params:
    replacement_rules:
      - find_string: 'APPLE'
        replacement_list: ['りんご', '青りんご']
        loop: true  # loop:true の場合、リストを循環して使用します
      - find_string: 'ORANGE'
        replacement_list: ['みかん', 'オレンジ']
        # loop指定がない場合、リストの最後の要素を使い続けます

  # --- 連番に置換 ---
  # from: text_replacer_with_sequence.py
  sequence_replace_params:
    string_to_find: 'ITEM:'
    start_number: 1
    format_string: '項目{}:' # {} の部分が連番に置き換わります

  # --- 文脈に応じて置換（統合版） ---
  # from: text_replacer_contextual.py
  simple_contextual_params:
    string_to_find: "2025"
    string_to_replace_with: "2026"

  left_context_params:
    string_to_find: 'キーワード'
    string_to_replace_with: '【重要】'
    left_context_length: 3 # キーワードの左側、最大3文字を含めて置換します

  right_context_params:
    string_to_find: 'です'
    string_to_replace_with: 'でした。'
    right_context_length: 1 # 「です」の右側、最大1文字(。)を含めて置換します

  # --- 複雑なパターンで置換 (from: text_replacer_with_complex_pattern.py) ---
  complex_pattern_params:
    string_to_find_1: '開始'
    string_to_find_2: '終了'
    string_to_replace_with: '【パターンマッチ】'
    min_len: 3
    max_len: 5 # 3～5文字の範囲にマッチ

  # --- リストから順番に置換 ---
  # from: text_replacer_from_list.py
  sequential_list_params:
    string_to_find: 'LIST_REPLACE'
    replacement_list: ['A', 'B', 'C']
    loop: true # loop:true の場合、リストを循環して使用します

  # --- 回数ベースでリストから置換 ---
  # from: text_replacer_with_count_based_list.py
  count_based_list_params:
    string_to_find: 'COUNT_TARGET'
    replacement_rules:
      - ['FIRST', 2]  # 1-2回目
      - ['SECOND', 4] # 3-4回目
      - ['THIRD', 5]  # 5回目以降

# 3. ベースとなるデフォルトのワークフロー
# -----------------------------------------------------------------
# jobsセクションが存在しない場合、またはjobsの各ジョブで
# workflowが上書きされない場合に、このワークフローが実行されます。
workflow:
  - function: "multi_replace_from_lists"
    param_set: "multi_word_replace_params"
  - function: "replace_string_with_sequence"
    param_set: "sequence_replace_params"
  - function: "replace_string_contextual"
    param_set: "simple_contextual_params"
  - function: "replace_string_contextual"
    param_set: "left_context_params"
  - function: "replace_string_contextual"
    param_set: "right_context_params"
  - function: "replace_complex_pattern"
    param_set: "complex_pattern_params"
  - function: "replace_string_from_list"
    param_set: "sequential_list_params"
  - function: "replace_string_with_count_based_list"
    param_set: "count_based_list_params"

# 4. 実行ジョブの定義
# -----------------------------------------------------------------
# このセクションが存在する場合、runner.pyは各ジョブを順番に実行します。
# 各ジョブでは、ベースとなる params や workflow を "overrides" で上書きできます。
jobs:
  # --- ジョブ1: パラメータの上書き ---
  # ベースの全ワークフローを実行するが、年号だけ2028年に変えるジョブ
  full_workflow_for_2028:
    overrides:
      params:
        simple_contextual_params:
          string_to_replace_with: "2028"
  
  # --- ジョブ2: ワークフローの上書き ---
  # フルーツ置換とリスト置換だけを実行する、全く別の処理を行うジョブ
  fruits_and_list_only:
    overrides:
      workflow:
        - function: "multi_replace_from_lists"
          param_set: "multi_word_replace_params"
        - function: "replace_string_from_list"
          param_set: "sequential_list_params"